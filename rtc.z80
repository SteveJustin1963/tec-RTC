;   https://github.com/Kris-Sekula/CA80/blob/master/RTC/RTC_0x2000_0x2300_v1.4.asm


ORG 2000H	; First free address for the 27C128 EPROM (base 27C64 EPROM ends on 1FFFH)

TOS	equ 0FF8Dh	; User STACK
M0  equ 02c9h	; Show clock CA80 system procedure

PIO_A	equ	0E0h	; CA80 user 8255 base address (port A)
PIO_B	equ	0E1h	; CA80 user 8255 base address + 1 (port B)
PIO_C	equ	0E2h	; CA80 user 8255 base address + 2 (port C)
PIO_M	equ	0E3h	; CA80 user 8255 control register

SCL_bit	equ	4h	; SCL port PC.4
SDA_bit	equ	0h	; SDA port PC.0


;
; GET_RTC: Copies the time from the hardware RTC to the software RTC in the CA80 system
;

GET_RTC:

	LD	SP,TOS			; Set stack pointer

	ld A,092h 			; Change port C(hi) and C(low) to output, port B to output
	out (PIO_M),A		; Reset PIO_C to 00H

GETTIME: ; Synchronize CA80 time with RTC

	ld hl,0ffedh		; Address of seconds in software RTC

	call stop			; Initiate I2C bus
	call WAIT_4
	
	call set_addr		; Set address counter to 00h
	call start_i2c
	ld a,0D1h			; Read current address (A1 for EEPROM, D0 for RTC)
	call putbyte		
	call get_ack		; Get first data byte back from slave (SDA-in)
	call getbyte		; Get seconds data (should be in register A)
	ld (hl),a			; Store seconds in software RTC
	inc hl				; Move to the next memory location
	call send_ack
	call getbyte		; Get minutes
	ld (hl),a			; Store minutes in software RTC
	inc hl
    
    call send_ack
	call getbyte		; Get hours
	ld (hl),a			; Store hours in software RTC
	inc hl
	call send_ack
	call getbyte		; Get date
	ld (hl),a			; Store date in software RTC
	inc hl
	call send_ack
	call getbyte		; Get month
	ld (hl),a			; Store month in software RTC
	inc hl
	call send_ack
	
	
	call getbyte		; Get year
	ld (hl),a			; Store year in software RTC
	inc hl

	call send_noack
	call stop
	
	RST 10h			; Clear display procedure
	defb 80h		; All digits
	
	JP M0			; Show time procedure *E[0]

;
;
;  
; SAVETIME: Saves the current software RTC time to the hardware RTC
;

	ORG 2100H	; Set address for SAVETIME procedure
	
SAVETIME:

	ld A,092h 			; Change port C(hi) and C(low) to output, port B to output
	out (PIO_M),A		; Reset PIO_C to 00H

	ld hl,0ffedh		; Address of seconds in software RTC
	
	call stop			; Initiate I2C bus

	call set_addr
	ld a,(hl)			; Save seconds to EEPROM under address 00
	call putbyte
	call get_ack
	
	ld A,092h
	out (PIO_M),A
	
	inc hl
	ld a,(hl)		; Save minutes to EEPROM under address 01
	call putbyte
	call get_ack
	
	ld A,092h
	out (PIO_M),A
	
	inc hl
	ld a,(hl)		; Save hours to EEPROM under address 02
	call putbyte
	call get_ack
	ld A,092h
	out (PIO_M),A

	inc hl
	ld a,(hl)		; Save day to EEPROM
	call putbyte
	call get_ack
	
	ld A,092h
	out (PIO_M),A

	inc hl
	ld a,(hl)		; Save month to EEPROM
	call putbyte
	call get_ack
	
	ld A,092h
	out (PIO_M),A
	
	inc hl
	ld a,(hl)		; Save year to EEPROM
	call putbyte
	call get_ack
	
	ld A,092h
	out (PIO_M),A
	
	call stop
	rst 30h
	
;
;
;
;
;

; WAIT_4: Delay subroutine
WAIT_4:
	push	AF
	push	BC
	push	DE
	ld	de,0400h		; Set delay value
W40:	djnz W40			; Delay loop
	dec de
	ld a,d
	or a
	jp	nz,W40
	pop	DE
	pop	BC
	pop	AF
	ret


; set_addr: Reset device address counter to 00h for I2C device on address D0
set_addr:
	call start_i2c
	ld a,0D0h		; Write Command A0 for EEPROM, D0 for RTC
	call putbyte
	call get_ack
	
	ld a,092h     	; SDA + SCL output
	out (PIO_M),A
	
	ld a,00h		; Read from address 00h
	call putbyte
	call get_ack
	
	ld a,092h       ; SDA + SCL output
	out (PIO_M),A
	
	ret


; get_ack: Get ACK from I2C slave
get_ack:
	ld A,093h		; SDA - in, SCL - out
	out (PIO_M),A	; SDA goes HI as it's set to input
	call sclset		; Raise CLK, now expect "low" on SDA as the sign of ACK
	ld A,(PIO_M)	; Read SDA and look for "LOW" = ACK, "HI" = NOACK or Timeout
	call sclclr
	ret
	; ToDo - Implement the ACK timeout, currently assuming the ACK came in blindly.


; send_ack: Send ACK to I2C bus (master keeps SDA HI on the 9th bit of data)
send_ack:
	ld a,092h		; SDA + SCL output
	out (PIO_M),A
	call sclset		; Clock SCL
	call sclclr
	ret


; send_noack: Send NAK (no ACK) to I2C bus (master keeps SDA HI on the 9th bit of data)
send_noack:
	ld a,092h     		
	out (PIO_M), A		
	call sdaset		; 	
	call sclset		; Clock SCL 
	call sclclr
	ret


; getbyte: Read 8 bits from I2C bus
getbyte:
	push bc
	ld A,093h       		; SDA - in, SCL - out
	out (PIO_M),A
	ld b,8
gb1:
	call sclset			; Clock UP
	in A,(PIO_C)		; SDA (RX data bit) is in A.0
	rrca				; Move RX data bit to CY
	rl c				; Shift CY into C
	call sclclr			; Clock DOWN
	djnz gb1
	ld a,c				; Return RX Byte in A
	pop bc
	ret


; putbyte: Send byte from A to I2C bus
putbyte:
	push bc
	ld c,a				; Shift register
	ld b,8
pbks1:
	sla c				; B[7] => CY
	call sdaput			; Send CY to SDA
	call sclclk			; Clock it
	djnz pbks1
	call sdaset			; Leave SDA high for ACK
	pop bc
	ret


; sclclk: Clock the SCL line Hi -> Lo
sclclk:
	call sclset
	call sclclr
	ret


; sdaput: Copy CY state to SDA line without changing SCL state
sdaput:
	in a,(PIO_C)
	res SDA_bit,a
	jr nc,sdz
	set SDA_bit,a
sdz:
	out (PIO_C),a
	ret


; stop: I2C STOP sequence (SDA goes HI while SCL is HI)
stop:
	push af
	call sdaclr
	call sclset
	call sdaset
	pop af
	ret


; start_i2c: I2C START sequence (SDA goes LO while SCL is HI)
start_i2c:
	call sdaset
	call sclset
	call sdaclr
	call sclclr
	call sdaset
	ret


; sclset: SCL HI without changing SDA
sclset:
	in a,(PIO_C)
	set SCL_bit,a
	out (PIO_C),a
	ret


; sclclr: SCL LO without changing SDA
sclclr:
	in a,(PIO_C)
	res SCL_bit,a
	out (PIO_C),a
	ret


; sdaset: SDA HI without changing SCL
sdaset:
	in a,(PIO_C)
	set SDA_bit,a
	out (PIO_C),a
	ret


; sdaclr: SDA LO without changing SCL
sdaclr:
	in a,(PIO_C)
	res SDA_bit,a
	out (PIO_C),a
	ret
