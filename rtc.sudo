
## Sudo Code:

1. Set the starting address to 0x2000
2. Define the stack pointer and system procedure
3. Define the 8255 base address for PIO_A, PIO_B, PIO_C and PIO_M
4. Define the SCL_bit and SDA_bit for PC.4 and PC.0

## GET_RTC:
1. Set the stack pointer to TOS
2. Change port C(hi) and C(low) to output, port B to output using the PIO_M register
3. Initiate bus and wait for 4 cycles
4. Set the address counter to 00h
5. Start the i2c communication
6. Send the read current address A1 for EEPROM or D0 for RTC
7. Get the first data byte back from the slave, SDA-in
8. Get the seconds data and save it to memory
9. Send an acknowledgement
10. Repeat steps 7-9 for minutes, hours, date, month, and year
11. Send a no acknowledgement
12. Stop the i2c communication
13. Clear the display procedure
14. Jump to the system procedure for showing the time

## SAVETIME:
1. Change port C(hi) and C(low) to output, port B to output using the PIO_M register
2. Initiate bus
3. Set the address counter
4. Save the seconds to EEPROM under address 00
5. Send an acknowledgement
6. Repeat steps 4-5 for minutes, hours, date, month, and year
7. Send a no acknowledgement
8. Stop the i2c communication
SAVETIME (continued):
Increment the memory address for the next value
Repeat steps 4-9 for minutes, hours, date, month, and year
Send a no acknowledgement
Stop the i2c communication
Reset the PIO_M register to the original value
End the SAVETIME procedure
Subroutines:
stop: initiates the bus and sends a stop signal
WAIT_4: waits for 4 cycles
set_addr: sets the address counter to 00h
start_i2c: starts the i2c communication
putbyte: sends a byte of data to the slave
get_ack: receives an acknowledgement from the slave
getbyte: receives a byte of data from the slave
send_ack: sends an acknowledgement to the slave
send_noack: sends a no acknowledgement to the slave

